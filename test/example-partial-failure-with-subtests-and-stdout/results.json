{
  "version": 3,
  "status": "fail",
  "tests": [
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > is criticality balanced with passes",
      "status": "pass",
      "test_code": "\"\"\"Testing border cases around typical points.\n\nT, n == (800, 500), (625, 800), (500, 1000), etc.\n\nNo output should be generated in the test report here, since\npassing subtests are not reported on.\n\n\"\"\"\n\ntest_data = ((750, 650, True), (799, 501, True), (500, 600, True),\n             (1000, 800, False), (800, 500, False), (800, 500.01, False),\n             (799.99, 500, False), (500.01, 999.99, False), (625, 800, False),\n             (625.99, 800, False), (625.01, 799.99, False), (799.99, 500.01, True),\n             (624.99, 799.99, True), (500, 1000, False), (500.01, 1000, False),\n             (499.99, 1000, True))\n\nfor variant, data in enumerate(test_data, start=1):\n    temp, neutrons_emitted, expected = data\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_emitted=neutrons_emitted, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = is_criticality_balanced(temp, neutrons_emitted)\n        failure_message = (f'Expected {expected} but calling is_criticality_balanced(temp={temp}, '\n                           f'neutrons_emitted={neutrons_emitted}) returned {actual_result}.')\n                           # f'with T={temp} and neutrons={neutrons_emitted}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 1
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output",
      "status": "fail",
      "message": "One or more variations of this test failed. Details can be found under each [variant#].",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #1]",
      "status": "fail",
      "message": "AssertionError: None != 'green' : Expected green as a result, but calling reactor_efficiency(voltage=10, current=1000, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #2]",
      "status": "fail",
      "message": "AssertionError: None != 'green' : Expected green as a result, but calling reactor_efficiency(voltage=10, current=999, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #3]",
      "status": "fail",
      "message": "AssertionError: None != 'green' : Expected green as a result, but calling reactor_efficiency(voltage=10, current=800, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #4]",
      "status": "fail",
      "message": "AssertionError: None != 'orange' : Expected orange as a result, but calling reactor_efficiency(voltage=10, current=799, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #5]",
      "status": "fail",
      "message": "AssertionError: None != 'orange' : Expected orange as a result, but calling reactor_efficiency(voltage=10, current=700, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2,
      "output": "orange"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #6]",
      "status": "fail",
      "message": "AssertionError: None != 'orange' : Expected orange as a result, but calling reactor_efficiency(voltage=10, current=600, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2,
      "output": "orange"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #7]",
      "status": "fail",
      "message": "AssertionError: None != 'red' : Expected red as a result, but calling reactor_efficiency(voltage=10, current=599, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2,
      "output": "orange"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #8]",
      "status": "fail",
      "message": "AssertionError: None != 'red' : Expected red as a result, but calling reactor_efficiency(voltage=10, current=560, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2,
      "output": "orange"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #9]",
      "status": "fail",
      "message": "AssertionError: None != 'red' : Expected red as a result, but calling reactor_efficiency(voltage=10, current=400, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #10]",
      "status": "fail",
      "message": "AssertionError: None != 'red' : Expected red as a result, but calling reactor_efficiency(voltage=10, current=300, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2,
      "output": "black"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #11]",
      "status": "fail",
      "message": "AssertionError: None != 'black' : Expected black as a result, but calling reactor_efficiency(voltage=10, current=299, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2,
      "output": "black"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #12]",
      "status": "fail",
      "message": "AssertionError: None != 'black' : Expected black as a result, but calling reactor_efficiency(voltage=10, current=200, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2,
      "output": "black"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > reactor efficiency with some subtest output [variation #13]",
      "status": "fail",
      "message": "AssertionError: None != 'black' : Expected black as a result, but calling reactor_efficiency(voltage=10, current=0, theoretical_max_power=10000) returned None",
      "test_code": "\"\"\"Partial failure and output in the test report.\nThis should happen for:\n   - variants 5, 6, 7, 8, 10, 11, and 12.\n\nNo output fields should be present for:\n   - the parent or for variations 1, 2, 3, 4, 9 or 13.\n\"\"\"\n\nvoltage = 10\ntheoretical_max_power = 10000\n\n# The numbers are chosen so that current == 10 x percentage\ntest_data = ((1000, 'green'), (999, 'green'), (800, 'green'),\n             (799, 'orange'), (700, 'orange'), (600, 'orange'),\n             (599, 'red'), (560, 'red'), (400, 'red'), (300, 'red'),\n             (299, 'black'), (200, 'black'), (0, 'black'))\n\nfor variant, data in enumerate(test_data, start=1):\n    current, expected = data\n    with self.subTest(f'variation #{variant}', voltage=voltage, current=current,\n                      theoretical_max_power=theoretical_max_power, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = reactor_efficiency(voltage, current, theoretical_max_power)\n        failure_message = (f'Expected {expected} as a result, but calling reactor_efficiency(voltage={voltage}, '\n                           f'current={current}, theoretical_max_power={theoretical_max_power}) '\n                           f'returned {actual_result} ')\n                           # f'with voltage={voltage}, current={current}, max_pow={theoretical_max_power}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 2
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation",
      "status": "fail",
      "message": "One or more variations of this test failed. Details can be found under each [variant#].",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #1]",
      "status": "fail",
      "message": "AssertionError: None != 'LOW' : Expected LOW but returned None with T=10, neutrons=399, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #2]",
      "status": "fail",
      "message": "AssertionError: None != 'LOW' : Expected LOW but returned None with T=10, neutrons=300, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #3]",
      "status": "fail",
      "message": "AssertionError: None != 'LOW' : Expected LOW but returned None with T=10, neutrons=1, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #4]",
      "status": "fail",
      "message": "AssertionError: None != 'LOW' : Expected LOW but returned None with T=10, neutrons=0, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #5]",
      "status": "fail",
      "message": "AssertionError: None != 'NORMAL' : Expected NORMAL but returned None with T=10, neutrons=901, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #6]",
      "status": "fail",
      "message": "AssertionError: None != 'NORMAL' : Expected NORMAL but returned None with T=10, neutrons=1000, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #7]",
      "status": "fail",
      "message": "AssertionError: None != 'NORMAL' : Expected NORMAL but returned None with T=10, neutrons=1099, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #8]",
      "status": "fail",
      "message": "AssertionError: None != 'LOW' : Expected LOW but returned None with T=10, neutrons=899, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #9]",
      "status": "fail",
      "message": "AssertionError: None != 'LOW' : Expected LOW but returned None with T=10, neutrons=700, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #10]",
      "status": "fail",
      "message": "AssertionError: None != 'LOW' : Expected LOW but returned None with T=10, neutrons=400, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #11]",
      "status": "fail",
      "message": "AssertionError: None != 'DANGER' : Expected DANGER but returned None with T=10, neutrons=1101, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    },
    {
      "name": "ExamplePartialFailureWithSubtestsAndStdout > fail safe with output truncation [variation #12]",
      "status": "fail",
      "message": "AssertionError: None != 'DANGER' : Expected DANGER but returned None with T=10, neutrons=1200, threshold=10000",
      "test_code": "\"\"\"All variations of this should fail and appear in the test report.\n   - All variations should have output.\n   - All output should have truncation warnings.\n\"\"\"\n\ntemp = 10\nthreshold = 10000\ntest_data = ((399, 'LOW'), (300, 'LOW'), (1, 'LOW'),\n             (0, 'LOW'), (901, 'NORMAL'), (1000, 'NORMAL'),\n             (1099, 'NORMAL'), (899, 'LOW'), (700, 'LOW'),\n             (400, 'LOW'), (1101, 'DANGER'), (1200, 'DANGER'))\n\nfor variant, (neutrons_per_second, expected) in enumerate(test_data, start=1):\n    with self.subTest(f'variation #{variant}', temp=temp, neutrons_per_second=neutrons_per_second,\n                      threshold=threshold, expected=expected):\n\n        # pylint: disable=assignment-from-no-return\n        actual_result = fail_safe(temp, neutrons_per_second, threshold)\n        failure_message = (f'Expected {expected} but returned {actual_result} with T={temp}, '\n                           f'neutrons={neutrons_per_second}, threshold={threshold}')\n        self.assertEqual(actual_result, expected, failure_message)",
      "task_id": 3,
      "output": "Ouptut Captured!!\nId donec ultrices tincidunt arcu non. Semper feugiat nibh sed pulvinar proin gravida hendrerit. Odio ut sem nulla pharetra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Suscipit adipiscing bibendum est ultricies integer quis. Vel elit scelerisque mauris pellentesque pulvinar. Quam nulla porttitor massa id neque aliquam vestibulum morbi blandit. Ac felis donec et odio pellentesque diam. Vitae tortor condimentum  [Output was truncated. Please limit to 500 chars]"
    }
  ]
}